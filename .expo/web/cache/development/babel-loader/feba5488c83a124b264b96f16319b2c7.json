{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/home/adn/Documentos/bootcamp/hackthejob/mobile-test-s7cjcbosxt/App.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { AppLoading } from 'expo';\nimport { Container, Text } from 'native-base';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport CurrentTrip from \"./components/CurrentTrip\";\nimport AppHeader from \"./components/AppHeader\";\nimport SwipCards from \"./components/SwipCards\";\nimport FormTour from \"./components/FormTour\";\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      isReady: false\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread({\n                Roboto: require('native-base/Fonts/Roboto.ttf'),\n                Roboto_medium: require('native-base/Fonts/Roboto_medium.ttf')\n              }, Ionicons.font)));\n\n            case 2:\n              this.setState({\n                isReady: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.isReady) {\n        return React.createElement(AppLoading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          }\n        });\n      }\n\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        }\n      }, React.createElement(AppHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        }\n      }), React.createElement(CurrentTrip, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        }\n      }), React.createElement(FormTour, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        }\n      }), React.createElement(SwipCards, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };","map":{"version":3,"sources":["/home/adn/Documentos/bootcamp/hackthejob/mobile-test-s7cjcbosxt/App.jsx"],"names":["React","Component","AppLoading","Container","Text","Font","Ionicons","CurrentTrip","AppHeader","SwipCards","FormTour","App","props","state","isReady","loadAsync","Roboto","require","Roboto_medium","font","setState"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,aAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,WAAP;AACA,OAAOC,SAAP;AACA,OAAOC,SAAP;AACA,OAAOC,QAAP;;IAGqBC,G;;;AACnB,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAFiB;AAKlB;;;;;;;;;;+CAGOT,IAAI,CAACU,SAAL;AACJC,gBAAAA,MAAM,EAAEC,OAAO,CAAC,8BAAD,CADX;AAEJC,gBAAAA,aAAa,EAAED,OAAO,CAAC,qCAAD;AAFlB,iBAGDX,QAAQ,CAACa,IAHR,E;;;AAKN,mBAAKC,QAAL,CAAc;AAAEN,gBAAAA,OAAO,EAAE;AAAX,eAAd;;;;;;;;;;;6BAGO;AACP,UAAI,CAAC,KAAKD,KAAL,CAAWC,OAAhB,EAAyB;AACvB,eAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,aACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,EAGM,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA,QAHN,EAIM,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA,QAJN,EAKM,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA,QALN,CADF;AAUD;;;;EAhC8Bd,KAAK,CAACC,S;;SAAlBU,G","sourcesContent":["import React,{Component} from 'react';\nimport { AppLoading } from 'expo';\nimport { Container, Text } from 'native-base';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport CurrentTrip from './components/CurrentTrip';\nimport AppHeader from \"./components/AppHeader\";\nimport SwipCards from \"./components/SwipCards\"\nimport FormTour from \"./components/FormTour\"\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isReady: false,\n    };\n  }\n\n  async componentDidMount() {\n    await Font.loadAsync({\n      Roboto: require('native-base/Fonts/Roboto.ttf'),\n      Roboto_medium: require('native-base/Fonts/Roboto_medium.ttf'),\n      ...Ionicons.font,\n    });\n    this.setState({ isReady: true });\n  }\n\n  render() {\n    if (!this.state.isReady) {\n      return <AppLoading />;\n    }\n\n    return (\n      <Container>\n       <AppHeader/>\n      \n            <CurrentTrip/>\n            <FormTour/>\n            <SwipCards/>\n         \n      </Container>\n    );\n  }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}